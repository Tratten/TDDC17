public class StateAndReward {

	
	/* State discretization function for the angle controller */
	public static String getStateAngle(double angle, double vx, double vy) {

		/* TODO: IMPLEMENT THIS FUNCTION */
		String state = "";
		
		if(angle  < 0.2 && angle > -0.2){
			state += "up#Up";
		} 
		else if (angle < -0.2){
			if(angle >= -1.5){
				state += "up#Left";
			} 
			else if(angle <= -3){
				state += "down#Down";
			}
			else {
				state += "down#Left";
			}
		}
		else if(angle > 0.2){
			if(angle <= 1.5){
				state += "up#Right";
			}
			else if(angle >= 3){
				state += "down#Down";
			}
			else {
				state += "down#Right";
			}
		}
//		String state = "OneStateToRuleThemAll";
		
		return state;
	}

	/* Reward function for the angle controller */
	public static double getRewardAngle(double angle, double vx, double vy) {

		/* TODO: IMPLEMENT THIS FUNCTION */
		double reward = 0;
		
		if(angle < 0.2 && angle > -0.2){
			reward += 5;
		} else if(angle > 1.5 || angle < -1.5){
			reward += -10;
		}

		if(vx < 0.3 && vx > -0.3){
			reward += 5;
		}
		if(vy < 1 && vy > -1){
			reward += 5;
		}
		
		return reward;
	}

	/* State discretization function for the full hover controller */
	public static String getStateHover(double angle, double vx, double vy) {

		/* TODO: IMPLEMENT THIS FUNCTION */
		String state = "";
		
		if(angle == 0){
			//perfect
			state += "perfect";
		}
		else if(angle  < 0.2 && angle > 0){
			state += "upUpRight";
		}				
		else if(angle > -0.2 && angle < 0){
			state += "upUpLeft";
		} 
		else if (angle < -0.2){
			if(angle >= -1.5){
				state += "upLeft";
			} 
			else if(angle <= -3){
				state += "downDown";
			}
			else {
				state += "downLeft";
			}
		}
		else if(angle > 0.2){
			if(angle <= 1.5){
				state += "upRight";
			}
			else if(angle >= 3){
				state += "downDown";
			}
			else {
				state += "downRight";
			}
		}
		
		state += "#";
		
		if(vx > 0.2){
			state += "Right";
		}else if(vx < -0.2){
			state += "Left";
		}else {
			state += "Still";
		}
		
		if(vy > 0.2){
			state += "Down";
		}else if(vy < -0.2){
			state += "Up";
		}else {
			state += "Still";
		}

//		String state = "OneStateToRuleThemAll";
		
		return state;
	}

	/* Reward function for the full hover controller */
	public static double getRewardHover(double angle, double vx, double vy) {

		/* TODO: IMPLEMENT THIS FUNCTION */
		double reward = 0;
		
		if(angle < 0.1 && angle > -0.1){
			reward += 20;
		}
		else if (angle < 0.2 && angle > -0.2){
			reward += 8;
		}

		if(vx < 0.3 && vx > -0.3){
			reward += 8;
		}
		if(vy < 1 && vy > -1){
			reward += 8;
		}
		
		return reward;
	}

	// ///////////////////////////////////////////////////////////
	// discretize() performs a uniform discretization of the
	// value parameter.
	// It returns an integer between 0 and nrValues-1.
	// The min and max parameters are used to specify the interval
	// for the discretization.
	// If the value is lower than min, 0 is returned
	// If the value is higher than min, nrValues-1 is returned
	// otherwise a value between 1 and nrValues-2 is returned.
	//
	// Use discretize2() if you want a discretization method that does
	// not handle values lower than min and higher than max.
	// ///////////////////////////////////////////////////////////
	public static int discretize(double value, int nrValues, double min,
			double max) {
		if (nrValues < 2) {
			return 0;
		}

		double diff = max - min;

		if (value < min) {
			return 0;
		}
		if (value > max) {
			return nrValues - 1;
		}

		double tempValue = value - min;
		double ratio = tempValue / diff;

		return (int) (ratio * (nrValues - 2)) + 1;
	}

	// ///////////////////////////////////////////////////////////
	// discretize2() performs a uniform discretization of the
	// value parameter.
	// It returns an integer between 0 and nrValues-1.
	// The min and max parameters are used to specify the interval
	// for the discretization.
	// If the value is lower than min, 0 is returned
	// If the value is higher than min, nrValues-1 is returned
	// otherwise a value between 0 and nrValues-1 is returned.
	// ///////////////////////////////////////////////////////////
	public static int discretize2(double value, int nrValues, double min,
			double max) {
		double diff = max - min;

		if (value < min) {
			return 0;
		}
		if (value > max) {
			return nrValues - 1;
		}

		double tempValue = value - min;
		double ratio = tempValue / diff;

		return (int) (ratio * nrValues);
	}

}
